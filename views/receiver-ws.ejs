<!DOCTYPE html>
<html>
<head>
    <title><%= title %></title>
    <link rel='stylesheet' href='/stylesheets/style.css' />
</head>
<body>
<h1><%= title %></h1>
<p>Welcome to <%= title %></p>
<p>receiver uuid: <b><%= uuid %></b></p>
<script>
  const uuid = '<%= uuid %>';
  const localVideo = document.getElementById('localVideo');
  let localStream = null;

  const start = (async () => {
    localStream = await navigator.mediaDevices.getUserMedia({audio: true, video: true});
  })()

  const config = {
    iceServers: [
      {
        urls: 'stun:stun.l.google.com:19302'
      }
    ]
  };

  const protocol = location.protocol === 'https:' ? 'wss' : 'ws';
  const url = new URL(`${protocol}://${location.host}`);
  url.searchParams.append('receiverUUID', uuid);

  let socket = new WebSocket(url);

  socket.onopen = function(e) {
    console.log('ws_open');
    socket.onoffer = offer;
    socket.onice = ice;
  };

  socket.emitEvent = (eventName, payload) => {
    socket.send(JSON.stringify({
      type: eventName,
      payload
    }))
  }

  socket.onmessage = (event) => {
    const data = JSON.parse(event.data);
    const eventName = `on${data.type}`;
    if (socket[eventName]) {
      socket[eventName](data.payload);
    }
  }

  let pc = null;
  let datachannel = null;

  const offer = async (event) => {
    console.log('OFFER: ', event)
    const configuration = {offerToReceiveVideo: true, offerToReceiveAudio: true, ...config}
    pc = new RTCPeerConnection(configuration);
    localStream.getTracks().forEach(track => {
      pc.addTrack(track, localStream)
    });
    pc.onconnection = () => console.log('Connection established');
    pc.ondatachannel = e => {
      console.log('datachannel: ', e);
      if (e.channel.label === 'RTCDataChannel') {
        datachannel = e.channel;
        datachannel.onmessage = message => {
          console.log('message: ', message);
        };
      }
    }
    pc.onconnectionstatechange = () => {
      if (['disconnected', 'closed', 'failed'].some(state => state === pc.connectionState)) {
        console.log('STATE: ', pc.connectionState);
      }
    }
    pc.onicecandidate = iceCandedateHandler;
    await pc.setRemoteDescription(event);
    const answer = await pc.createAnswer();
    await pc.setLocalDescription(answer);
    socket.emitEvent('answer', answer);
  }

  const ice = async (icecandidate) => {
    console.log('rec_ice: ', icecandidate)
    if (pc) {
      await pc.addIceCandidate(icecandidate.candidate);
    }
  }

  const iceCandedateHandler = event => {
    console.log('ice_handler');
    if (event.candidate) {
      socket.emitEvent('ice', {
        candidate: event.candidate,
        sdpMid: event.candidate.sdpMid,
        sdpMLineIndex: event.candidate.sdpMLineIndex
      })
    }
  }

  const unbind = () => {
    console.log('unbind')
  };

</script>
</body>
</html>
